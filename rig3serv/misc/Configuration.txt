Rig3 Documentation: Configuration


Pre-amble: Rig3 is not a server. It's a standalone application that parses text files to
generate a blog. To work, it uses a configuration file that describe the source to process
and the kind of site to generate. It then generates the corresponding HTML files.

The purpose of this document is to explain the configuration file.

----------------------
1- Location
----------------------

By default, rig3 will look for a configuration file in the following locations:
- /etc/rig3.rc
- $HOME/.rig3rc (e.g. "/home/username/.rig3rc" under Linux or
                 "C:\Document and Settings\username\.rig3rc" under Windows)

However it is expected your configuration file probably resides elsewhere, in which case you
can use the "-c" command-line flag to specify it. The most common case is that the file is
located in the current directory, so you'll do something like this:
 $ /path/to/rig3.py -c myconfig.rc


----------------------
2- Format
----------------------

The configuration file has the following format:
- it is separated in sections. Each section starts by a line with "[section-name]"
- each section contains zero or more lines in the form "variable=value".
The value ends at the end of the line. The length is arbitrary.

The section name "DEFAULT" has a special meaning: all its variables are "inherited" by *all*
sections (even if declared before.) This is convenient to avoid typing common values more
than once, for example the theme to use.


----------------------
3- Expected Sections
----------------------

When rig3 parses a configuration file, it looks for a section called "serve".

It is expected to define a variable "sites", which must be a comma-separated list of
section names that defines the sites to process.

Example:
 [serve]
 sites = mysite1, mysite2
 [mysite1]
 ... variables for site 1
 [mysite2]
 ... variables for site2

This allows you to define multiple sites and not use them all (i.e. as a way to "comment out"
a site and exclude it from processing.)

Note that if the "serve" section is undefined or does not contain a "sites" variable, rig3
will simply do nothing.


----------------------
4- Site Section Variables
----------------------

Here is the list of all variables expected in a site.
Remember that _any_ variable can be defined in the [DEFAULT] section and when
doing so it will be inherited by each site's section, and you can of course
override it in any section.


The following variables are required:

- sources = string, path of source directory (absolute or relative, see section 4 below)
- dest_dir=None, path of output directory (absolute or relative)


The following variables have default values:

- public_name="", public name of blog (for templates to display)
- theme=DEFAULT_THEME, string of theme directory
- base_url="http://html.base.url/", for templates which want to use it
- header_img_url="", to replace the default header image in the default template
- header_img_url=185, the height of the header_img in pixels.
- rig_img_size=512, the default size of a [rigimg] tag in Izumi
- tracking_code="", a raw html piece for google analytics or similar
- num_item_page (int): Number of items per HTML page. Default is 20. Must be > 0.
- num_item_atom (int): Number of items in ATOM feed. Default is 20. -1 for all.


The following optional variables are described in more details below:

- cat_filter: None or list of category names (strings, case-insensitive) to accept.
- sources: List of source directories (i.e. where posts & entries are read from.)
- rig_img_url: string format with <album> and <img> parameters
- rig_album_url: string format with <album> parameter
- img_gen_script: String. When not empty, script called for each album image used


The following variables are not implemented yet, planned for a future version:

- link_to_rig_album: False. Should images link to the rig album? [TODO]
- link_to_rig_img: True. Should images link to the corresponding rig image? [TODO]
- permalinks: True. Boolean, true if should have permalinks [TODO]
- toc: False. Boolean, true if we want a TOC at the top of the index [TODO]
- atom: True. Boolean, false to disable the atom feed generation [TODO]


----------------------
5- Category Filter
----------------------

"cat_filter" is an optional variable that you can define per site.
It lists categories that you want to filter in or out.

cat_filter is a space-separated or comma-separated list of categories to include
in given site.

The special symbol "*" matches all categories.
The special symbol "$" matches empty categories lists (i.e. post with no categories).

A category name can be prefixed by ! to be excluded.

The order is NOT relevant.
The exclusion has precedence on the inclusion.
The default category filter (i.e. its absence) is "*", so that it matches everything.

Examples:
  cat_filter=public cats !dogs !parrots $ funny
	=> matches all posts that have categories public or cats or funny or no
	category and will exclude those which have dogs and parrots.

  cat_filter=!*
  	=> excludes ALL posts. Can be used to block a site in case of hurry.
  
  cat_filter=!$
  	=> excludes all posts that have no tags

  cat_filter=!dogs
and
  cat_filter=* !dogs
	=> means the same thing: match every category, except those posts that use "dogs".

  cat_filter=*
and
  cat_filter=
  	=> means the same thing, i.e. accept everything (even posts with no categories)

  cat_filter=* !$
  	=> accepts all posts except those with no categories, i.e. accepts posts must
  	   have at least one category set.


----------------------
6- RIG URLs
----------------------

To be able to link to RIG, you need to specify how to generate the
URL to create RIG images.

Rig3 does not currently generate any image per se. Instead it creates
_links_ to your existing RIG albums. The trick is simply to have both rig3
and RIG point to the same source directories and the paths will align.

There are 4 variables that are used to generate RIG links. One of them is
mandatory, the others have default values.

- rig_base: An http:// URL for the base of your RIG album (i.e. the web path to
  the index.php).

For example, if I have an album available at "http://www.exmple.com/pix/index.php",
I'd use: rig_base=http://www.exmple.com/pix/index.php

By default rig_base is EMPTY. When it is left empty, no RIG links or images are generated.


- rig_album_url: This variable declares how to generate a link to a given RIG album.

The default is:
	rig_album_url=%(rig_base)s?album=%(album)s

Where:
	%(rig_base)s is the value of the site's rig_base variable as-is
	%(album)s    is the URL-encoded album's path relative to the source directory
	

Note that "%(name)s" is a standard Python idiom for inserting a variable in a string.
In this case "%(rig_base)s" will get replaced by the value of rig_base whereas
%(album)s will get replaced by the URL-encoded album's relative path (relative to the
corresponding source's directory).


- rig_img_url: This variable declares how to generate a text link to a given RIG image _page_.

Note: This does insert a *text* link to a RIG page for one image. Compare with the
variable rig_thumb_url below, which generates a link to INCLUDE an image in-place.

The default is:
	rig_img_url=%(rig_base)s?album=%(album)s&img=%(img)s

Where:
	%(rig_base)s is the value of the site's rig_base variable as-is
	%(album)s    is the URL-encoded album's path relative to the source directory
	%(img)s      is the URL-encoded image's name (with extension)


- rig_thumb_url: This variable declares how to generate an IMG reference to a give RIG image.

The default is:
	rig_thumb_url=%(rig_base)s?th=&album=%(album)s&img=%(img)s&sz=%(size)s&q=75

Where:
	%(rig_base)s is the value of the site's rig_base variable as-is
	%(album)s    is the URL-encoded album's path relative to the source directory
	%(img)s      is the URL-encoded image's name (with extension)
	%(size)s	 is the size in pixel of the largest dimension of the image

- rig_img_size=512, the default size of a [rigimg] tag in Izumi


----------------------
7- Source Selection
----------------------

To specify source(s), you need to add one or more "sources" variables.
Each variable contains one or more 'type: path' entries, separated by commas.
If you need to use a comma in the path, place the path in double-quotes.

Type is one of all | dirs | files | blogs:
 - "dirs": Each entry is stored in a directory which name is "date title",
           The directory must contain an "index.izu" to be valid.
 - "files": Each entry is stored in a separate file which name is "date title.izu"
 - "blogs": Entries are grouped *.izu files with an [izu:blog] header. Each file
           represents a blog category.

The type "all" is an alias for "all the other source readers for this path".
It is /really/ a shortcut to entering the same path 3 times with the different
specific types. As a side effect, rig3 will read the path recursively *three*
times. So unless you really mean that, use a specific type for a given path.

You can have as many entries as you want on per line.

Since duplicate variable names cannot be used, if you want multiple variables
just add a suffix to "sources". It can be anything, e.g. "sources_1" or
"sourcesABC" or "sourcesss", as long as it's a valid variable name. Sources
variables are processed in lexicographical order.

Example:

 sources = all: /home/user/izu_files, dirs: /my/dir, files: "/my,files/", files: /my/files2
 sources2 = all: /more/stuff
 sources_001 = all: /even/more/stuff
 sourcesStuff = all: /some/stuff


It might be convenient to override the RIG album generation depending on the source.
Do to so, you can add one "rig_base: URL" entry per "sources" variable, it will
apply to all the sources defined on that line and it will override the 
"rig_base" variable for that site (or the global one defined in DEFAULT) if any.

Example:

 rig_base = http://main.server.com/pix/index.php
 sources1 = files: "/my,files/", files: /my/files2
 sources2 = files: /my/public/files, rig_base: http://public.server.com/index.php
 sources3 = dirs: /home/dirs, rig_base: http://public.server.com/index.php, files: /home/files

In this example, the files from sources1 will use the global rig_base variable
whereas sources2 and 3 will use the specific rig_base defined in that variable.


----------------------
8- Image Generation Script
----------------------

When defined, the site setting "img_gen_script" is the script
that will be executed for each album image that should be included in a page.

The script receives several arguments, as described below. It must returns either:
- the URL of the generated image (to be wrapped in an <img> tag)
- a full <a> HTML tag if a link is requested.
- a full <img> HTML tag otherwise

When this happens, the default template specified by the variables rig_thumb_url and
rig_img_url is ignored and the returned string is used as-is.

If the script returns an error code != 0 or does not output anything, the default
template specified by the variables rig_thumb_url and rig_img_url is used.

Environment:
- IMG_DIR: the current directory being processed (this *may* be relative, depending
           on the current source setting being processed.)
- IMG_NAME: the basename of the image 
- IS_LINK: "1" if <a> is required, "0" otherwise.
- OPT_SIZE: an optional size in pixels for the image. Empty string when absent.
- OPT_TITLE: an optional title for the <img> or <a> tags. Empty string when absent.
- OPT_CAPTION: an optional caption for the <img> or <a> tags. Empty string when absent.

Input:
- $1 = same as $IMG_DIR
- $2 = same as $IMG_NAME
- $3 = same as $IS_LINK
- $4 = same as $OPT_SIZE
- $5 = same as $OPT_TITLE
- $6 = same as $OPT_CAPTION

Output:
- error code 0: uses stdout
- error code != 0: use rig_thumb_url and rig_img_url as usual

Stdout:
- nothing: use rig_thumb_url and rig_img_url as usual
- <img ...>: insert HTML tag as-is.
- <a... >: insert HTML tag as-is.
- other: URL to be inserted in a <img src="<url>"> tag.
- if CAPTION is defined and <tt> is not present, the caption will be added in
  a <tt> tag at the end.


----------------------
9- Examples
----------------------

One of the nice effects you can achieve is to define several sites in your configuration
file that use the same source, but with different category filters and different attributes.
For example, you can define a site for public post and another one for all private posts:

 [public-site]
 source = /path/to/posts
 dest_dir = public_html/blog/public
 cat_filter = public
 
 [private-site]
 source = /path/to/posts
 dest_dir = public_html/blog/private
 cat_filter = !public

Note that in this case you just need to specify a different destination directory and a
different category filter.


----------------------
10- Atom Feed
----------------------

To generate an atom feed, there's nothing to do.
An "atom.xml" is automatically generated along with the "index.html" that lists the
most recent items for every category pages. Both files contain the same items.



--end--
