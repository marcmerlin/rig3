Rig3 Documentation: Configuration


Pre-amble: Rig3 is not a server. It's a standalone application that parses text files to
generate a blog. To work, it uses a configuration file that describe the source to process
and the kind of site to generate. It then generates the corresponding HTML files.

The purpose of this document is to explain the configuration file.

----------------------
1- Location
----------------------

By default, rig3 will look for a configuration file in the following locations:
- /etc/rig3.rc
- $HOME/.rig3rc (e.g. "/home/username/.rig3rc" under Linux or
                 "C:\Document and Settings\username\.rig3rc" under Windows)

However it is expected your configuration file probably resides elsewhere, in which case you
can use the "-c" command-line flag to specify it. The most common case is that the file is
located in the current directory, so you'll do something like this:
 $ /path/to/rig3.py -c myconfig.rc


----------------------
2- Format
----------------------

The configuration file has the following format:
- it is separated in sections. Each section starts by a line with "[section-name]"
- each section contains zero or more lines in the form "variable=value".
The value ends at the end of the line. The length is arbitrary.

The section name "DEFAULT" has a special meaning: all its variables are "inherited" by *all*
sections (even if declared before.) This is convenient to avoid typing common values more
than once, for example the theme to use.


----------------------
3- Expected Sections
----------------------

When rig3 parses a configuration file, it looks for a section called "serve".

It is expected to define a variable "sites", which must be a comma-separated list of
section names that defines the sites to process.

Example:
 [serve]
 sites = mysite1, mysite2
 [mysite1]
 ... variables for site 1
 [mysite2]
 ... variables for site2

This allows you to define multiple sites and not use them all (i.e. as a way to "comment out"
a site and exclude it from processing.)

Note that if the "serve" section is undefined or does not contain a "sites" variable, rig3
will simply do nothing.


----------------------
4- Site Section Variables
----------------------

Here is the list of all variables expected in a site.
Remember that _any_ variable can be defined in the [DEFAULT] section and when
doing so it will be inherited by each site's section, and you can of course
override it in any section.


The following variables are required:

- sources = string, path of source directory (absolute or relative, see section 4 below)
- dest_dir=None, path of output directory (absolute or relative)


The following variables have default values:

- public_name="", public name of blog (for templates to display)
- theme=DEFAULT_THEME, string of theme directory
- base_url="http://html.base.url/", for templates which want to use it
- header_img_url="", to replace the default header image in the default template
- header_img_url=185, the height of the header_img in pixels.
- rig_img_size=512, the default size of a [rigimg] tag in Izumi
- tracking_code="", a raw html piece for google analytics or similar
- num_item_page (int): Number of items per HTML page. Default is 20. Must be > 0.
- num_item_atom (int): Number of items in ATOM feed. Default is 20. -1 for all.
- encoding (str): Text input encoding. Defaults to utf-8.


The following optional variables are described in more details below:

- cat_filter: None or list of category names (strings, case-insensitive) to accept.
- sources: List of source directories (i.e. where posts & entries are read from.)
- rig_img_url: string format with <album> and <img> parameters
- rig_album_url: string format with <album> parameter
- img_gen_script: String. When not empty, script called for each album image used


The following variables are not implemented yet, planned for a future version:

- link_to_rig_album: False. Should images link to the rig album? [TODO]
- link_to_rig_img: True. Should images link to the corresponding rig image? [TODO]
- permalinks: True. Boolean, true if should have permalinks [TODO]
- toc: False. Boolean, true if we want a TOC at the top of the index [TODO]
- atom: True. Boolean, false to disable the atom feed generation [TODO]


----------------------
5- Encoding
----------------------

By default rig3 considers input files to be Latin-1 (aka ISO-8859-1).

Output files are always UTF-8.

You can override this at 3 levels:
- per site, using encoding=type in the .rc file
- per source, by defining encoding=type
- per izu file by adding a tag [izu:encoding:type] on the very first line.

Values are whatever python's codecs module accepts. Typical choices
would be utf-8, ascii, iso-8859-1, etc., with a variety of aliases.

Full list is here: http://docs.python.org/library/codecs.html#standard-encodings

Internal processing is done in ISO-8859-1, no matter what the input encoding is.
You can change the input encoding, as long as content can be interpreted as
ISO-8859-1. Unfortunately, this limitation cannot be easily lifted. However
unknown characters will be output using their XML entity reference encoding
(e.g. &#xhhhh; in hexa), which means as a workaround you could at least
post-process it.


----------------------
6- Category Filter
----------------------

"cat_filter" is an optional variable that you can define per site.
It lists categories that you want to filter in or out.

cat_filter is a space-separated or comma-separated list of categories to include
in given site.

The special symbol "*" matches all categories.
The special symbol "$" matches empty categories lists (i.e. post with no categories).

A category name can be prefixed by ! to be excluded.

The order is NOT relevant.
The exclusion has precedence on the inclusion.
The default category filter (i.e. its absence) is "*", so that it matches everything.

Examples:
  cat_filter=public cats !dogs !parrots $ funny
    => matches all posts that have categories public or cats or funny or no
    category and will exclude those which have dogs and parrots.

  cat_filter=!*
      => excludes ALL posts. Can be used to block a site in case of hurry.

  cat_filter=!$
      => excludes all posts that have no tags

  cat_filter=!dogs
and
  cat_filter=* !dogs
    => means the same thing: match every category, except those posts that use "dogs".

  cat_filter=*
and
  cat_filter=
      => means the same thing, i.e. accept everything (even posts with no categories)

  cat_filter=* !$
      => accepts all posts except those with no categories, i.e. accepts posts must
         have at least one category set.


----------------------
7- RIG URLs
----------------------

To be able to link to RIG, you need to specify how to generate the
URL to create RIG images.

Rig3 does not currently generate any image per se. Instead it creates
_links_ to your existing RIG albums. The trick is simply to have both rig3
and RIG point to the same source directories and the paths will align.

There are 4 variables that are used to generate RIG links. One of them is
mandatory, the others have default values.

- rig_base: An http:// URL for the base of your RIG album (i.e. the web path to
  the index.php). This variable MUST be defined in a source. See section 7 below.

For example, if I have an album available at "http://www.exmple.com/pix/index.php",
I'd use: rig_base=http://www.exmple.com/pix/index.php

By default rig_base is EMPTY. When it is left empty, no RIG links or images are generated.


- rig_album_url: This variable declares how to generate a link to a given RIG album.

The default is:
    rig_album_url=%(rig_base)s?album=%(album)s

Where:
    %(rig_base)s is the value of the site's rig_base variable as-is
    %(album)s    is the URL-encoded album's path relative to the source directory


Note that "%(name)s" is a standard Python idiom for inserting a variable in a string.
In this case "%(rig_base)s" will get replaced by the value of rig_base whereas
%(album)s will get replaced by the URL-encoded album's relative path (relative to the
corresponding source's directory).


- rig_img_url: This variable declares how to generate a text link to a given RIG image _page_.

Note: This does insert a *text* link to a RIG page for one image. Compare with the
variable rig_thumb_url below, which generates a link to INCLUDE an image in-place.

The default is:
    rig_img_url=%(rig_base)s?album=%(album)s&img=%(img)s

Where:
    %(rig_base)s is the value of the site's rig_base variable as-is
    %(album)s    is the URL-encoded album's path relative to the source directory
    %(img)s      is the URL-encoded image's name (with extension)


- rig_thumb_url: This variable declares how to generate an IMG reference to a give RIG image.

The default is:
    rig_thumb_url=%(rig_base)s?th=&album=%(album)s&img=%(img)s&sz=%(size)s&q=75

Where:
    %(rig_base)s is the value of the site's rig_base variable as-is
    %(album)s    is the URL-encoded album's path relative to the source directory
    %(img)s      is the URL-encoded image's name (with extension)
    %(size)s     is the size in pixel of the largest dimension of the image

- rig_img_size=512, the default size of a [rigimg] tag in Izumi


----------------------
8- Source Selection
----------------------

To specify source(s), you need to add one or more "sources" variables.
Each variable contains one or more 'type: path' entries, separated by commas.
If you need to use a comma in the path, place the path in double-quotes.

Type is one of dir | file | blog:
 - "dir": Each entry is stored in a directory which name is "date title",
          The directory must contain an "index.izu" to be valid.
 - "file": Each entry is stored in a separate file which name is "date title.izu"
 - "blog": Combines both "dir" and "file". If a directory matches the "date title"
           pattern, it is assumed to be a directory entry. Otherwise the directory
           is scanned for individual *.izu files with an [izu:blog] header.

Note: the "dir" and "file" types are considered deprecated. Use "blog" wherever you can.

On top of that, each "sources" variable must define a "rig_base" variable if
that source should generate rig images.

Sources can also overridde the global encoding by defining an "encoding"
variable.

You can have as many entries as you want per line.

Since duplicate variable names cannot be used, if you want multiple variables
just add a suffix to "sources". It can be anything, e.g. "sources_1" or
"sourcesABC" or "sourcesss", as long as it's a valid variable name. Sources
variables are processed in lexicographical order.

Example:

 sources = blog: /home/user/izu_files, files: "/my,files/", files: /my/files2, rig_base: /my/imgs/1
 sources2 = blog: /more/stuff, dirs: /my/dir, rig_base: /my/imgs/2
 sources_001 = blog: /even/more/stuff, rig_base: /my/imgs/3
 sourcesNoImages = blog: /some/stuff

The default is that the RIG album generation depends on the source.
Do to so, you must add one "rig_base: URL" entry per "sources" variable, it will
apply to all the sources defined on that line. If you do not add the rig_base
variable to the source definition, no RIG images will be generated.

So in the example above, the sourcesNoImages will fail to generate any kind of RIG image.


----------------------
9- Image Generation Script
----------------------

When defined, the site setting "img_gen_script" is the script
that will be executed for each album image that should be included in a page.

The script receives several arguments, as described below. It must returns either:
- the URL of the generated image (to be wrapped in an <img> tag)
- a full <a> HTML tag if a link is requested.
- a full <img> HTML tag otherwise

When this happens, the default template specified by the variables rig_thumb_url and
rig_img_url is ignored and the returned string is used as-is.

If the script returns an error code != 0 or does not output anything, the default
template specified by the variables rig_thumb_url and rig_img_url is used.

Environment:
- ABS_DIR: the current directory being processed, absolute for the filesystem.
           This is the directory of the current post, the image could point to a sub-directory.
- REL_FILE: the filename relative to the source "blog:" from the settings.
- IMG_NAME: the name of the image, relative to ABS_DIR.
            This will contain any relative directories given to the [rigimglink] command.
- RIG_BASE: the rig_base parameter from the settings, either the global one or
            the source-specific one.
- IS_LINK: "1" if <a> is required, "0" otherwise.
- OPT_SIZE: an optional size in pixels for the image. Empty string when absent.
- OPT_TITLE: an optional title for the <img> or <a> tags. Empty string when absent.
- OPT_CAPTION: an optional caption for the <img> or <a> tags. Empty string when absent.

Input:
- $1 = same as $ABS_DIR
- $2 = same as $REL_FILE
- $3 = same as $IMG_NAME
- $4 = same as $IS_LINK
- $5 = same as $OPT_SIZE
- $6 = same as $OPT_TITLE
- $7 = same as $OPT_CAPTION
- $8 = same as $RIG_BASE

Output:
- error code 0: uses stdout
- error code != 0: use rig_thumb_url and rig_img_url as usual

Stdout:
- nothing: use rig_thumb_url and rig_img_url as usual
- <img ...>: insert HTML tag as-is.
- <a... >: insert HTML tag as-is.
- other: URL to be inserted in a <img src="<url>"> tag.
- if CAPTION is defined and <tt> is not present, the caption will be added in
  a <tt> tag at the end.


----------------------
10- Examples
----------------------

One of the nice effects you can achieve is to define several sites in your configuration
file that use the same source, but with different category filters and different attributes.
For example, you can define a site for public post and another one for all private posts:

 [public-site]
 source = /path/to/posts
 dest_dir = public_html/blog/public
 cat_filter = public

 [private-site]
 source = /path/to/posts, rig_base=http://alternate.site/albums, encoding=iso-8859-1
 dest_dir = public_html/blog/private
 cat_filter = !public

Note that in this case you just need to specify a different destination directory and a
different category filter.


----------------------
11- Atom Feed
----------------------

To generate an atom feed, there's nothing to do.
An "atom.xml" is automatically generated along with the "index.html" that lists the
most recent items for every category pages. Both files contain the same items.



--end--
