Izumi Syntax

(TODO: header, description)



--------------------
1- Existing Tags
--------------------

**** Formatting tags:

For tags that have both start and end, they must be on the same line.

__bold__ : 2 underscore, something, two more underscores to close.

''italics'': 2 single-quotes, something, two more single quotes to close.

==code==: 2 equals, something, two more equals, generates an inline <code> block

You can combine them, i.e. __bold ''with ==code== italics''__ as long as they are nested properly.

Since 2 pairs of these characters are interpreted, if you want to write them in your
text, you need to add one extra character to escape it. So "====" generates "==", and
"====" generates "===" and so on.


Note that all these formatting tags must be on the same "logical" line.
If for clarity you really want to split the lines in your input file, you can
use the line-concatenating operator to merge them together. To do so, simply
add a blackslash as the very last character of your lines. All groups of lines that
end with a blackslash are treated as one big line and formatting tags will work
as expected.


**** Tags Syntax:

All structural tags are enclosed in brackets: [tag].
To generate a text such as "[tag]", prefix it with a second "[" to prevent the expansion.
So "[[tag]" will output "[tag]", and "[[[tag]" for "[[tag]", and so on.
Unkwon Tags are silently dropped.

[!-- .... --] denotes a comment. The content can be multiline. Comments are totally skipped
and can contain anything, even izumi tags you want to ignore. Comments cannot be nested.
The closing tag is "--]". Contrary to HTML, "--" is valid inside a comment.

Each tag has its own mini-syntax.
Generally, the syntax is [tag:parameters], where parameters can be anything but
a closing bracket. The exact syntax is ad-hoc to the tag's purpose, i.e. whatever
feels more natural to me. This is purely subjective.
 

**** Paragraphs:

Paragraphs are generated by empty lines.
Otherwise lines are automatically concatenated with a space in between.

When you insert multiple empty lines, Rig3 tries its best to insert a single
<br> or <p> tag as needed.

You can force a break by using the [br] tag anywhere on the line or by
adding a single forward-slash (/) at the end of the line. 
You can force a paragraph by using a [p] tag anywhere on the line.

You can use the [br] and [p] tags anywhere inside a formatting tag
(i.e. bold, italic, code).


**** List tags:

Currently the only supported list tags is "*" for first-level lists:

* Item 1
* Item 2
* Item 3...

The "*" must be the first character of the line and must be followed by one space.
Note: I plan on supporting multi-level unordered lists. I currently have no plans for
ordered lists (i.e. with 1./2./3. prefixes)


Sections: [s:<lang>], such as [s:en] and [s:fr].


**** Auto-linking:

- named image link: [title|http://blah/blah.gif,jpeg,jpg,png,svg], without [[

- unnamed image link: [http://blah/blah.gif,jpeg,jpg,png,svg], without [[

-named link: [name|http://blah/blah], accept ftp:// and #name, without [[

- unnamed link: [http://blah/blah], accepts ftp:// and #name, without [[

- unformated link: http://blah or ftp:// (link cannot contain quotes)
	and must not be surrounded by quotes
	and must not be surrounded by brackets
	and must not be surrounded by < >        -- RM 20041120 fixed
	and must not be prefixed by [] or |
	(all these exceptions to prevent processing twice links in the form <a href="http...">http...</a>

- rig link: [name|riglink:image_glob]

This generates a *text* link onto a RIG image located in the *same* directory.
Glob cannot move accross directories. It has to be something like "344_*.jpg" for example,
not "../myimages/....". It replies on the site settings "rig_img_url" and "rig_base"
variables.

- rig image/thumbnail: [title|rigimg:size:image_glob|caption]
  and                  [title|rigimglink:size:image_glob|caption]

This generates a rig image/thumbnail inserted in-place in the generated HTML.
It replies on the site settings "rig_thumb_url", "rig_base" and "rig_img_size" variables.

When the tag name is "rigimglink" (instead of just "rigimg"), an HTML link is generated
that wraps the image.

The "name" part, if present, is the title/tag of the generated <IMG> HTML tag.
It generally appears when hovering over the image.

The "size" is expressed in pixels. It is optional, in which case the default
value from "rig_img_size" is used. When the size is omitted, the following
colon must be omitted too.

The following syntaxes are valid:
	[title|rigimg:size:image_glob|caption]
	[title|rigimg:image_glob|caption]
	[rigimg:size:image_glob|caption]
	[rigimg:image_glob|caption]
	[title|rigimg:size:image_glob]
	[title|rigimg:image_glob]
	[rigimg:size:image_glob]
	[rigimg:image_glob]
(same with rigimglink.)


**** Izumi Tags

Izumi tags are internal directives, either for the izumi parser or for the Rig3 parser.

The general syntax is: [izu:<tag>:<value>]
The value can be anything but a closing bracket.
As for any other tags, use a second opening bracket to invalidate it (i.e. [[izu:tag:value]).

The tags currently recognized by Rig3 are:
- cat: A comma-separated or whitespace-separated list of categories. Category names
       cannot contain commas nor whitespace. They are case-insensitive.
- date: An optional date for the post. If present, it will override the one extracted from the
       post's filename or directory name. The accepted formats are:
        YYYYMMDDHHMMSS
        YYYYMMDDHHM
        YYYYMMDD
       	YYYY-MM-DD,HH:MM:SS (accepted separators are - : / and , or space for date/time)
       	YYYY-MM-DD,HH:MM
       	YYYY-MM-DD
- title: An optional title for the post, which will override the one from the post's filename
       or directory name if present.
- author: The post's author. Treated as case-insensitive.


--------------------
2- Future Tags
--------------------

Planned but not yet implemented yet:
- use \ at the end of line to concatenate lines
- multiple level <ul>
- blockquotes
- code blocks (aka <pre>)
- table
