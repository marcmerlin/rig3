#!/usr/bin/python
#-----------------------------------------------------------------------------|
"""
Rig3 module: Template generator

Part of Rig3.
License GPL.
"""
__author__ = "ralfoide@gmail.com"


#------------------------
class Node(object):
    def __init__(self):
        raise NotImplementedError("Abstract class Node cannot be instanciated")

    def __eq__(self, rhs):
        if rhs is None:
            raise RuntimeError("Can't compare %s with None" % repr(self))
        else:
            raise RuntimeError("Can't compare %s with %s" % (repr(self), repr(rhs)))

    def Generate(self, context):
        """
        Generates content for this node for the given context.
        Returns a string with the generated content.
        """
        raise NotImplementedError("Node is abstract")


#------------------------
class NodeList(Node):
    """
    Constructs a list of nodes.
    - list (list [Node]): A list of nodes instances.
    The object can be created with an empty list and nodes can be appended
    later. The list can be empty but should not be None.
    """
    def __init__(self, _list=None):
        self._list = _list or []

    def Append(self, node):
        """
        Appends a node to the list.
        Returns self for chaining.
        """
        self._list.append(node)
        return self

    def __eq__(self, rhs):
        if isinstance(rhs, NodeList):
            return self._list == rhs._list
        return super(NodeList, self).__eq__(rhs)

    def __repr__(self):
        return "<NodeList %s>" % (self._list)

    def Generate(self, context):
        """
        Generates content by concatenating content from all children nodes. 
        """
        s = ""
        for n in self._list:
            s += n.Generate(context)
        return s


#------------------------
class NodeLiteral(Node):
    """
    Constructs a literal node.
    - literal (string): The literal value of the node, all whitespaces and
      end-lines included.
    """
    def __init__(self, literal):
        self._literal = literal

    def __eq__(self, rhs):
        if isinstance(rhs, NodeLiteral):
            return self._literal == rhs._literal
        return super(NodeLiteral, self).__eq__(rhs)

    def __repr__(self):
        return "<NodeLiteral '%s'>" % self._literal

    def Generate(self, context):
        """
        Returns the literal value as content. Context is not used. 
        """
        return self._literal


#------------------------
class NodeTag(Node):
    """
    Constructs a tag node.
    - tag (Tag): A tag definition instance (rig.template.tag.Tag*)
    - parameters (string): Parameter(s) string. Can be empty but not None.
    - content (NodeList): None if this tag does not accept content, otherwise
      must an instance of NodeList (even if it contains only one node inside.)
    """
    def __init__(self, tag, parameters="", content=None):
        self._tag = tag
        self._parameters = parameters
        self._content = content

    def Tag(self):
        return self._tag
    
    def Parameters(self):
        return self._parameters
    
    def Content(self):
        return self._content

    def __eq__(self, rhs):
        if isinstance(rhs, NodeTag):
            return (type(self._tag) == type(rhs._tag) and
                    self._parameters == rhs._parameters and
                    self._content == rhs._content)
        return super(NodeTag, self).__eq__(rhs)

    def __repr__(self):
        return "<NodeTag %s %s %s>" % (self._tag.Tag(), self._parameters, self._content)

    def Generate(self, context):
        """
        Returns the content generated by the tag.
        """
        return self._tag.Generate(self, context)


#------------------------
# Local Variables:
# mode: python
# tab-width: 4
# py-continuation-offset: 4
# py-indent-offset: 4
# sentence-end-double-space: nil
# fill-column: 79
# End:
